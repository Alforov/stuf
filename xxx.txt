
----------------------------------------------------------------------------------------------------------------------------------------------------------
WEB
create server by sockets, 
by servlet api, 
jsp style, 
by spring web.xml and spring with java config.
Write all variants on the paper.
servlet style param mapping and spring @Controller type mapping
----------------------------------------------------------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------------------------------------------------------
TEST
type of testing
----------------------------------------------------------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------------------------------------------------------
GIT

----------------------------------------------------------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------------------------------------------------------
REST
Если коротко то это арихеткурный стиль проектирования ПО
Если немного шире - то это набор ограничений, правил и свойств которые применяются при разработки ПО
Для того что бы понять что такое рест и откуда он взялся нужно понять какие требования предьявляют к приложениям работающим в сети.
Основных несколько: 
  1)Низкий барьер вхождения - это требование приминимо как и архитекторам так и программистам вообщем всем кто участвует в разработке а также поддержке ПО.
  2)Расширяемость - расширяемость позваляет нам не застрять на каком то этапе развития ПО, а как мы знаем даже 
  ПО полностью соответствующее требованиям все равно в последствии переделывается. Приложения стремящиеся к долгожительству должны быть готовы к изменениям
  3)Распределенная Hypermedia - определяется наличием инфорамции по управлению приложением
    Distributed hypermedia позволяет хранить инфомацию в одном месте а управлять ее удаленно
  4) Независимость разных частей ПО. ПО должно быть готово к эволюционным а так же фрагментарным изменениям, 
  где старые модули со-существуют с новыми. В какой то момент более старые имплементации должны быть изьяты
 без неблагоприятных воздейтвий на новые

 Как можно выполнить эти требования - как вариант - набором ограничений применяемым к элементам в веб-архитектуре  - такие огранчения уже есть в протоколах(например HTTP)
 Почему бы не дополнить уже имеющиеся ограничения(например HTTP протокола) еще и дополнительными(не всегда обязательными)
 Вот REST и является арихеткурным стилем ограничивающий текущий протокол и по - по сути является видением авторов RESTа - как должен выглядить современный веб.
 
NullStyle
Проэктирование начинается с системным требованиям ,в общем и без всяких ограничений, а уже потом постепенно определяет и применяет ограничения к елементам системы. Другими словами данный стиль можно назвать NullStyle. 

client-server
Далее мы вводим следующее ограничение что наша система будет иметь стиль клиент-сервер.Таким образом мы разделяем  пользовательский интерфейс и хранением данных
Так же мы улучшаем портативность позволяя создавать пользовательские интерфейсы в зависимости от платформы а также улучшить маштабируемость серверной стороны за счет упрощения. Это позволяет так же эволюционировать компанентам независимо друг от друга.

client-stateless-server
Следующее ограничение - отсутсвие состояния. Каждый запрос должен нести всю необходимую инфомацию что бы сервер понял его. Таким образом, состояние сеанса полностью поддерживается клиентом. 
Это ограничение улучшает свойства видимости, надежности и масштабируемости(visibility, reliability, and scalability).
 Видимость - потому что мониторинговым системы не должна выходить за рамки конкретного запроса.
 Надежность - потому что на сервер не хранит состояний, поэтому сбои сервера несут минимальные издержки.
 Масштабируемость - потому что запрос может идти на любой сервер и будет обработан единобразно.
 Минусы данного стиля: Уменьшение сетевой производительсности за счет передачи повторяймой инфомации

Client-Cache-Stateless-Server
Кеширование позволяет добится увеличения производительности(например значительно уменьшить количество обращений в бд). Из-за кеширования уменьшатеся належность системы
из теоритичской возможности получения из кеша недостоверной на данный момент информации


Layered System
Layered-Client-Cache-Stateless-Server
Позволяет при проектировании вводить иерархические слои когда определенный сервис не может заглянуть за определенный слой(например как в схеме pl-bl). Слои посредники позволяют уменьшить связность системы улучшить маштабируемость(балансировки и прочее)
Из менусов данного стиля - умешьшение производительности так как передача инфомации через слои обычно достаточно затратна.
Данный стиль похож на pipe-and-filter style

Code-On-Demand
Позволяет клиенту выполнять опередленный код полученный от сервера(скрипты, аплеты)
Данный подход уменьшает видимость системы

Uniform Interface
Uniform-Layered-Client-Cache-Stateless-Server
Главной особенностью REST стиля от остальных - это его упор на единобразный интерфейс между компонентами.
Применяя данный принцип ко всем компонентами системы - вся система в целом упрощается, а видимость и взаимодейтсвие улучшается. Так же мы разделяем сам интерфейс взаимодействия и сервис который его предоставляет.
Из минусов - данная унификацию уменьшает эффективность системы, так как инофмация передается в опреленном формате даже в тех случаях когда он избыточный.
Для получения единобразого интерфейса, должны присутвовать определенные ограничения для управления поведением компонентов. Вот они: 
resourece -  ресурсом может все что угодно  ( intended conceptual target of a hypertext reference)
identification of resources ресурс должен четко индетифицироватся как я понимаю в через URN, URL( uniform resources location).
manipulation of resources through representations - манипуляция ресурсом через его представления(representation -  HTML document, JPEG image )
selfdescriptive messages - при передачи сообщения должна присутсвовать не толко сама инфомация но и мета информация например Content-Type.(representation metadata - media type, last-modified time)
hypermedia as the engine of application state - или HATEOAS это означает что hypertext используется(через ссылки) для нахождения вашего пути работы с API


REST игнорирует детали компонентов а так же на реализацию и синтаксис протокола, чтобы сосредоточиться на ролях компонентов и на ограничения на их взаимодействие с другими компонентами

----------------------------------------------------------------------------------------------------------------------------------------------------------


----------------------------------------------------------------------------------------------------------------------------------------------------------
DB
----------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------------------------
SQL
----------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------------------------
HIBERNATE
----------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------------------------
SPRING
spring bean life cycle
spring base modules
----------------------------------------------------------------------------------------------------------------------------------------------------------